<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Trang Quản Trị Người Dùng & Vai Trò</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
      body { padding-top: 2rem; }
      .table thead th { white-space: nowrap; }
      .badge-soft { opacity: .8; }
      .cursor-pointer { cursor: pointer; }
      .form-inline-gap > * { margin-right: .5rem; }
    </style>
  </head>
  <body>
    <div class="container">
  <h1 class="mb-4">Trang Quản Trị Người Dùng & Vai Trò</h1>

      <!-- Roles Panel -->
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <strong>Vai trò</strong>
          <div class="d-flex align-items-center">
            <input id="roleSearch" type="text" class="form-control form-control-sm" placeholder="Tìm theo tên" />
            <button id="btnRoleSearch" class="btn btn-sm btn-outline-primary ms-2">Tìm</button>
            <button id="btnRoleReset" class="btn btn-sm btn-outline-secondary ms-2">Reset</button>
          </div>
        </div>
        <div class="card-body">
          <form id="roleForm" class="row g-2 mb-3">
            <div class="col-md-4">
              <input name="name" class="form-control" placeholder="Tên vai trò" required />
            </div>
            <div class="col-md-6">
              <input name="description" class="form-control" placeholder="Mô tả" />
            </div>
            <div class="col-md-2 d-grid">
              <button class="btn btn-success" type="submit">Thêm vai trò</button>
            </div>
          </form>
          <div class="table-responsive">
            <table class="table table-striped align-middle" id="rolesTable">
              <thead>
                <tr>
                  <th>Tên</th>
                  <th>Mô tả</th>
                  <th>Đã xoá</th>
                  <th>Thao tác</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Users Panel -->
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <strong>Người dùng</strong>
          <div class="d-flex align-items-center">
            <input id="userSearchUsername" type="text" class="form-control form-control-sm" placeholder="Tìm theo username" />
            <input id="userSearchFullName" type="text" class="form-control form-control-sm ms-2" placeholder="Tìm theo họ và tên" />
            <button id="btnUserSearch" class="btn btn-sm btn-outline-primary ms-2">Tìm</button>
            <button id="btnUserReset" class="btn btn-sm btn-outline-secondary ms-2">Reset</button>
          </div>
        </div>
        <div class="card-body">
          <form id="userForm" class="row g-2 mb-3">
            <div class="col-md-3">
              <input name="username" class="form-control" placeholder="Tài khoản" required />
            </div>
            <div class="col-md-3">
              <input name="email" type="email" class="form-control" placeholder="Email" required />
            </div>
            <div class="col-md-3">
              <input name="password" type="password" class="form-control" placeholder="Mật khẩu" required />
            </div>
            <div class="col-md-3">
              <input name="fullName" class="form-control" placeholder="Họ và tên" />
            </div>
            <div class="col-md-6">
              <input name="avatarUrl" class="form-control" placeholder="Ảnh đại diện (URL)" />
            </div>
            <div class="col-md-3">
              <select name="role" id="roleSelect" class="form-select">
                <option value="">-- Chọn vai trò --</option>
              </select>
            </div>
            <div class="col-md-3 d-grid">
              <button class="btn btn-success" type="submit">Thêm người dùng</button>
            </div>
          </form>

          <div class="table-responsive">
            <table class="table table-striped align-middle" id="usersTable">
              <thead>
                <tr>
                  <th>Tài khoản</th>
                  <th>Họ và tên</th>
                  <th>Email</th>
                  <th>Vai trò</th>
                  <th>Trạng thái</th>
                  <th>Số lần đăng nhập</th>
                  <th>Đã xoá</th>
                  <th>Thao tác</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
      const api = {
        roles: '/roles',
        users: '/users'
      };

      // Utils
      function qs(sel){ return document.querySelector(sel); }
      function qsa(sel){ return Array.from(document.querySelectorAll(sel)); }
      function toast(msg, type='info'){
        console.log(`[${type}]`, msg);
      }

      // Roles
      async function loadRoles(){
        const name = qs('#roleSearch').value.trim();
        const url = name ? `${api.roles}?name=${encodeURIComponent(name)}` : api.roles;
        const res = await fetch(url);
        const data = await res.json();
        renderRoles(data);
        renderRoleSelect(data);
      }
      function renderRoleSelect(list){
        const sel = qs('#roleSelect');
        const current = sel.value;
        sel.innerHTML = '<option value="">-- Chọn vai trò --</option>' +
          list.filter(r => !r.isDelete).map(r => `<option value="${r._id}">${r.name}</option>`).join('');
        if (current) sel.value = current;
      }
      function renderRoles(list){
        const tbody = qs('#rolesTable tbody');
        tbody.innerHTML = list.map(r => `
          <tr>
            <td>${r.name}</td>
            <td>${r.description || ''}</td>
            <td>${r.isDelete ? '<span class="badge bg-secondary">Đã xoá</span>' : '<span class="badge bg-success badge-soft">Chưa xoá</span>'}</td>
            <td class="d-flex gap-1">
              <button class="btn btn-sm btn-outline-primary" onclick='editRole("${r._id}")'>Sửa</button>
              <button class="btn btn-sm btn-outline-danger" onclick='softDeleteRole("${r._id}")'>Xoá mềm</button>
            </td>
          </tr>
        `).join('');
      }
      async function createRole(form){
        const body = Object.fromEntries(new FormData(form).entries());
        const res = await fetch(api.roles, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Tạo role thất bại', 'error'); return; }
        form.reset();
        await loadRoles();
        toast('Đã tạo role', 'success');
      }
      async function editRole(id){
  const name = prompt('Tên mới:');
        if (name === null) return;
  const description = prompt('Mô tả mới (có thể để trống):');
        const res = await fetch(`${api.roles}/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name, description }) });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Cập nhật role thất bại', 'error'); return; }
        await loadRoles();
        toast('Đã cập nhật role', 'success');
      }
      async function softDeleteRole(id){
        if (!confirm('Xác nhận xoá mềm role này?')) return;
        const res = await fetch(`${api.roles}/${id}`, { method: 'DELETE' });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Xoá mềm role thất bại', 'error'); return; }
        await loadRoles();
        toast('Đã xoá mềm role', 'success');
      }

      // Users
      async function loadUsers(){
        const username = qs('#userSearchUsername').value.trim();
        const fullName = qs('#userSearchFullName').value.trim();
        const params = new URLSearchParams();
        if (username) params.append('username', username);
        if (fullName) params.append('fullName', fullName);
        const url = params.toString() ? `${api.users}?${params}` : api.users;
        const res = await fetch(url);
        const data = await res.json();
        renderUsers(data);
      }
      function renderUsers(list){
        const tbody = qs('#usersTable tbody');
        tbody.innerHTML = list.map(u => `
          <tr>
            <td>${u.username}</td>
            <td>${u.fullName || ''}</td>
            <td>${u.email}</td>
            <td>${u.role ? (u.role.name || u.role) : ''}</td>
            <td>${u.status ? '<span class="badge bg-success">Đã kích hoạt</span>' : '<span class="badge bg-secondary">Chưa kích hoạt</span>'}</td>
            <td>${u.loginCount ?? 0}</td>
            <td>${u.isDelete ? '<span class="badge bg-secondary">Đã xoá</span>' : '<span class="badge bg-success badge-soft">Chưa xoá</span>'}</td>
            <td class="d-flex gap-1 flex-wrap">
              <button class="btn btn-sm btn-outline-primary" onclick='editUser("${u._id}")'>Sửa</button>
              <button class="btn btn-sm btn-outline-warning" onclick='activateUser("${u.email}","${u.username}")'>Kích hoạt</button>
              <button class="btn btn-sm btn-outline-danger" onclick='softDeleteUser("${u._id}")'>Xoá mềm</button>
            </td>
          </tr>
        `).join('');
      }
      async function createUser(form){
        const body = Object.fromEntries(new FormData(form).entries());
        if (!body.password) { toast('Password là bắt buộc', 'error'); return; }
        const res = await fetch(api.users, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Tạo user thất bại', 'error'); return; }
        form.reset();
        await loadUsers();
        toast('Đã tạo user', 'success');
      }
      async function editUser(id){
  const fullName = prompt('Họ và tên mới:');
        if (fullName === null) return;
  const avatarUrl = prompt('Ảnh đại diện (URL) mới (có thể để trống):');
  const statusInp = prompt('Trạng thái (true/false):');
        const status = statusInp ? statusInp.toLowerCase() === 'true' : undefined;
        const res = await fetch(`${api.users}/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ fullName, avatarUrl, status })
        });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Cập nhật user thất bại', 'error'); return; }
        await loadUsers();
        toast('Đã cập nhật user', 'success');
      }
      async function softDeleteUser(id){
        if (!confirm('Xác nhận xoá mềm user này?')) return;
        const res = await fetch(`${api.users}/${id}`, { method: 'DELETE' });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Xoá mềm user thất bại', 'error'); return; }
        await loadUsers();
        toast('Đã xoá mềm user', 'success');
      }
      async function activateUser(email, username){
        const res = await fetch(`${api.users}/activate`, {
          method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, username })
        });
        if (!res.ok){ const e = await res.json(); toast(e.message || 'Kích hoạt thất bại', 'error'); return; }
        await loadUsers();
        toast('Đã kích hoạt user', 'success');
      }

      // Events
      window.addEventListener('DOMContentLoaded', async () => {
        // Role search
        qs('#btnRoleSearch').addEventListener('click', loadRoles);
        qs('#btnRoleReset').addEventListener('click', () => { qs('#roleSearch').value=''; loadRoles(); });
        qs('#roleForm').addEventListener('submit', async (e) => { e.preventDefault(); await createRole(e.target); });

        // User search
        qs('#btnUserSearch').addEventListener('click', loadUsers);
        qs('#btnUserReset').addEventListener('click', () => { qs('#userSearchUsername').value=''; qs('#userSearchFullName').value=''; loadUsers(); });
        qs('#userForm').addEventListener('submit', async (e) => { e.preventDefault(); await createUser(e.target); });

        await loadRoles();
        await loadUsers();
      });
    </script>
  </body>
  </html>
